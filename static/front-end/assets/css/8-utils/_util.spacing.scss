$spacers: (
  xxxxs:    var(--space-xxxxs),
  xxxs:     var(--space-xxxs),
  xxs:      var(--space-xxs),
  xs:       var(--space-xs),
  sm:       var(--space-sm),
  md:       var(--space-md),
  lg:       var(--space-lg),
  xl:       var(--space-xl),
  xxl:      var(--space-xxl),
  xxxl:     var(--space-xxxl),
  xxxxl:    var(--space-xxxxl),
  xxxxxl:   var(--space-xxxxxl),
  default:  var(--space-unit)
);
// Adding default Margin and Padding classes
@each $breakpoint in map-keys($breakpoints) {
  $infix: breakpoint-infix($breakpoint, $breakpoints);

  @include breakpoint($breakpoint, "not all") {
    .has-margin#{$infix} { margin: 0 !important; }
    .has-padding#{$infix} { padding: 0 !important; }
  }

  @include breakpoint($breakpoint) {
    @each $prop, $abbrev in (margin: margin, padding: padding) {
      @each $size, $length in $spacers {
        .#{$abbrev}-#{$size}#{$infix} { #{$prop}: $length !important; }

        .#{$abbrev}-y-#{$size}#{$infix},
        .#{$abbrev}-top-#{$size}#{$infix} {
          #{$prop}-top: $length !important;
        }

        .#{$abbrev}-x-#{$size}#{$infix},
        .#{$abbrev}-right-#{$size}#{$infix} {
          #{$prop}-right: $length !important;
        }

        .#{$abbrev}-y-#{$size}#{$infix},
        .#{$abbrev}-bottom-#{$size}#{$infix} {
          #{$prop}-bottom: $length !important;
        }

        .#{$abbrev}-x-#{$size}#{$infix},
        .#{$abbrev}-left-#{$size}#{$infix} {
          #{$prop}-left: $length !important;
        }
      }
      .#{$abbrev}-0#{$infix} { #{$prop}: 0 !important; }

      .#{$abbrev}-y-0#{$infix},
      .#{$abbrev}-top-0#{$infix} {
        #{$prop}-top: 0 !important;
      }

      .#{$abbrev}-x-0#{$infix},
      .#{$abbrev}-right-0#{$infix} {
        #{$prop}-right: 0 !important;
      }

      .#{$abbrev}-y-0#{$infix},
      .#{$abbrev}-bottom-0#{$infix} {
        #{$prop}-bottom: 0 !important;
      }

      .#{$abbrev}-x-0#{$infix},
      .#{$abbrev}-left-0#{$infix} {
        #{$prop}-left: 0 !important;
      }
    }

    .margin-y-auto#{$infix},
    .margin-top-auto#{$infix} {
      margin-top: auto !important;
    }

    .margin-x-auto#{$infix},
    .margin-right-auto#{$infix} {
      margin-right: auto !important;
    }

    .margin-y-auto#{$infix},
    .margin-bottom-auto#{$infix} {
      margin-bottom: auto !important;
    }

    .margin-x-auto#{$infix},
    .margin-left-auto#{$infix} {
      margin-left: auto !important;
    }
    // Negative margins (e.g., where `.margin-bottom-n-xl` is negative version of `.margin-bottom-xl`)
    @each $size, $length in $spacers {
      @if ($size) {
        .margin-n-#{$size}#{$infix} { margin: calc(-1 * #{$length}) !important; }

        .margin-y-n-#{$size}#{$infix},
        .margin-top-n-#{$size}#{$infix} {
          margin-top: calc(-1 * #{$length}) !important;
        }

        .margin-x-n-#{$size}#{$infix},
        .margin-right-n-#{$size}#{$infix} {
          margin-right: calc(-1 * #{$length}) !important;
        }

        .margin-y-n-#{$size}#{$infix},
        .margin-bottom-n-#{$size}#{$infix} {
          margin-bottom: calc(-1 * #{$length}) !important;
        }

        .margin-x-n-#{$size}#{$infix},
        .margin-left-n-#{$size}#{$infix} {
          margin-left: calc(-1 * #{$length}) !important;
        }
      }
    }

    .margin-x-n-container#{$infix},
    .margin-left-n-container#{$infix} { margin-left: calc(-1 * var(--container-padding)); }

    .margin-x-n-container#{$infix},
    .margin-right-n-container#{$infix} { margin-right: calc(-1 * var(--container-padding)); }

    .padding-x-container#{$infix},
    .padding-left-container#{$infix} { padding-left: var(--container-padding); }

    .padding-x-container#{$infix},
    .padding-right-container#{$infix} { padding-right: var(--container-padding); }
  }
}
// .padding-header {
//   padding-top: var(--main-header-height);
// }
